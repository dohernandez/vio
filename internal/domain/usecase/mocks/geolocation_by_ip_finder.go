// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/dohernandez/vio/internal/domain/model"
	mock "github.com/stretchr/testify/mock"
)

// GeolocationByIPFinder is an autogenerated mock type for the GeolocationByIPFinder type
type GeolocationByIPFinder struct {
	mock.Mock
}

type GeolocationByIPFinder_Expecter struct {
	mock *mock.Mock
}

func (_m *GeolocationByIPFinder) EXPECT() *GeolocationByIPFinder_Expecter {
	return &GeolocationByIPFinder_Expecter{mock: &_m.Mock}
}

// FindGeolocationByIP provides a mock function with given fields: ctx, ip
func (_m *GeolocationByIPFinder) FindGeolocationByIP(ctx context.Context, ip string) (model.Geolocation, error) {
	ret := _m.Called(ctx, ip)

	if len(ret) == 0 {
		panic("no return value specified for FindGeolocationByIP")
	}

	var r0 model.Geolocation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (model.Geolocation, error)); ok {
		return rf(ctx, ip)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) model.Geolocation); ok {
		r0 = rf(ctx, ip)
	} else {
		r0 = ret.Get(0).(model.Geolocation)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, ip)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GeolocationByIPFinder_FindGeolocationByIP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindGeolocationByIP'
type GeolocationByIPFinder_FindGeolocationByIP_Call struct {
	*mock.Call
}

// FindGeolocationByIP is a helper method to define mock.On call
//   - ctx context.Context
//   - ip string
func (_e *GeolocationByIPFinder_Expecter) FindGeolocationByIP(ctx interface{}, ip interface{}) *GeolocationByIPFinder_FindGeolocationByIP_Call {
	return &GeolocationByIPFinder_FindGeolocationByIP_Call{Call: _e.mock.On("FindGeolocationByIP", ctx, ip)}
}

func (_c *GeolocationByIPFinder_FindGeolocationByIP_Call) Run(run func(ctx context.Context, ip string)) *GeolocationByIPFinder_FindGeolocationByIP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *GeolocationByIPFinder_FindGeolocationByIP_Call) Return(_a0 model.Geolocation, _a1 error) *GeolocationByIPFinder_FindGeolocationByIP_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GeolocationByIPFinder_FindGeolocationByIP_Call) RunAndReturn(run func(context.Context, string) (model.Geolocation, error)) *GeolocationByIPFinder_FindGeolocationByIP_Call {
	_c.Call.Return(run)
	return _c
}

// NewGeolocationByIPFinder creates a new instance of GeolocationByIPFinder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGeolocationByIPFinder(t interface {
	mock.TestingT
	Cleanup(func())
}) *GeolocationByIPFinder {
	mock := &GeolocationByIPFinder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
