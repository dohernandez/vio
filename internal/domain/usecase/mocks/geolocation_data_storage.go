// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/dohernandez/vio/internal/domain/model"
	mock "github.com/stretchr/testify/mock"
)

// GeolocationDataStorage is an autogenerated mock type for the GeolocationDataStorage type
type GeolocationDataStorage struct {
	mock.Mock
}

type GeolocationDataStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *GeolocationDataStorage) EXPECT() *GeolocationDataStorage_Expecter {
	return &GeolocationDataStorage_Expecter{mock: &_m.Mock}
}

// SaveGeolocation provides a mock function with given fields: ctx, geo
func (_m *GeolocationDataStorage) SaveGeolocation(ctx context.Context, geo model.Geolocation) error {
	ret := _m.Called(ctx, geo)

	if len(ret) == 0 {
		panic("no return value specified for SaveGeolocation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Geolocation) error); ok {
		r0 = rf(ctx, geo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GeolocationDataStorage_SaveGeolocation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveGeolocation'
type GeolocationDataStorage_SaveGeolocation_Call struct {
	*mock.Call
}

// SaveGeolocation is a helper method to define mock.On call
//   - ctx context.Context
//   - geo model.Geolocation
func (_e *GeolocationDataStorage_Expecter) SaveGeolocation(ctx interface{}, geo interface{}) *GeolocationDataStorage_SaveGeolocation_Call {
	return &GeolocationDataStorage_SaveGeolocation_Call{Call: _e.mock.On("SaveGeolocation", ctx, geo)}
}

func (_c *GeolocationDataStorage_SaveGeolocation_Call) Run(run func(ctx context.Context, geo model.Geolocation)) *GeolocationDataStorage_SaveGeolocation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Geolocation))
	})
	return _c
}

func (_c *GeolocationDataStorage_SaveGeolocation_Call) Return(_a0 error) *GeolocationDataStorage_SaveGeolocation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GeolocationDataStorage_SaveGeolocation_Call) RunAndReturn(run func(context.Context, model.Geolocation) error) *GeolocationDataStorage_SaveGeolocation_Call {
	_c.Call.Return(run)
	return _c
}

// NewGeolocationDataStorage creates a new instance of GeolocationDataStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGeolocationDataStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *GeolocationDataStorage {
	mock := &GeolocationDataStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
