syntax = "proto3";

option go_package = "github.com/dohernandez/vio/pkg/api";

package api.vio;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "vio"
    version: "1.0"
    description: "Geolocation service provider"
  }
  schemes: HTTP;
  consumes: "application/json"
  produces: "application/json"

  responses: {
    key: "400"
    value: {
      description: "Provided invalid argument.";
      schema: {
        json_schema: {
          ref: ".google.rpc.Status"
        }
      }
    }
  }
  responses: {
    key: "500"
    value: {
      description: "Internal error."
      schema: {
        json_schema: {
          ref: ".google.rpc.Status"
        }
      }
    }
  }
};

// The API Vio manage geolocation data.
service VioService {
  // GeolocationByIPExposer expose the geolocation data by IP.
  //
  // Receives a request with the ip. Responses with the geolocation data otherwise not.
  rpc GeolocationByIPExposer(GeolocationByIPExposerRequest) returns (GeolocationByIPExposerResponse) {
    // Client example (Assuming the service is hosted at the given 'DOMAIN_NAME'):
    // Client example:
    //   curl - d '{"ip": "200.106.141.15"}' http://DOMAIN_NAME/resource/name
    option (google.api.http) = {
      get : "/v1/geolocations/{ip}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "200"
        value: {
          examples: {
            key: "application/json"
            value: '{"ip_address": "200.106.141.15", "country_code": "SI", "country": "Nepal", "city": "DuBuquemouth", "latitude": -84.87503094689836, "longitude": 7.206435933364332, "mystery_value": 7823011346}'
          }
          schema: {
            json_schema: {
              ref: ".api.vio.GeolocationByIPExposerResponse"
            }
          }
        }
      }
    };
  }
}

message GeolocationByIPExposerRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "GeolocationByIPExposerRequest"
      description: "Request message to expose the IP geolocation data."
      required: ["ip"]
    }
  };
  // IP of the geolocation data to expose.
  string ip = 1;
}

message GeolocationByIPExposerResponse {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "GeolocationByIPExposerResponse"
      description: "Response message from the IP geolocation data."
    }
  };

  // IP address.
  string ip_address = 1 [json_name = "ip_address"];
  // Country code.
  string country_code = 2 [json_name = "country_code"];
  // Country.
  string country = 3 [json_name = "country"];
  // City.
  string city = 4 [json_name = "city"];
  // Latitude.
  double latitude = 5 [json_name = "latitude"];
  // Longitude.
  double longitude = 6 [json_name = "longitude"];
  // Mystery value.
  double mystery_value = 7 [json_name = "mystery_value"];
}